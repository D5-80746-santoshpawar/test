
import com.sunbeam.*;
import com.sunbeam.DoublyLinkedListPerson.Node;



	
	
 public class  DoublyLinearLinkedlist {
    static class Node {
        String name;
        Node next;
        Node prev;

        public Node(String name) {
            this.name = name;
            this.next = null;
            this.prev = null;
        }
    

    private Node head;

    public  void DoublyLinearLinkedlist() {
    	this.head=null;
    }
 
    
    
	
	public Node(String name, Node next, Node prev, Node head) {
		super();
		this.name = name;
		this.next = next;
		this.prev = prev;
		this.head = head;
	}





	public void AddLast() {
		  Node newNode = new Node(name);
	        if (head == null) {
	            head = newNode;
	        } else {
	            Node temp = head;
	            while (temp.next != null) {
	                temp = temp.next;
	            }
	            temp.next = newNode;
	            newNode.prev = temp;
	        }
	        System.out.println("Node with name '" + name + "' added at the last position.");
	}
		
	}
	
	// Delete node from first position
	public void DeleteLast() {
		  if (head == null) {
	            System.out.println("List is empty. Cannot delete from an empty list.");
	            return;
	        }

	        Node temp = head;
	        head = head.next;

	        if (head != null) {
	            head.prev = null;
	        }

	        System.out.println("Node with name '" + temp.name + "' deleted from the first position.");
	    
		
	}
	
	// display all nodes in forward direction
	public void DisplayAll(){
		
	}
	
	//display alternate nodes starting from first node
	public void DisplayAlternate() {
		
	}
	
	// delete mth node from nth node if available
	
	public void DeletePosition() {
		
	}
	
	//swap all pairs starting from first node
	public void SwapPairs() {
		
	}
	
	// find max sum of any two name length
	
	
	public void MaxSum() {
		
	}
	
	
	publis staitc void main (String[] args) {
		
	}
}