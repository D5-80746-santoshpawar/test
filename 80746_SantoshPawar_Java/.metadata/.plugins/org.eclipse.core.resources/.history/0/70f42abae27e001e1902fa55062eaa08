
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class AccountDao implements AutoCloseable {
	private Connection con;

	public AccountDao() throws Exception {
		con = DbUtil.getConnection();
	}

	public void close() {
		try {
			if (con != null)
				con.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	Scanner sc = new Scanner(System.in);

	public int save(Account c) throws Exception {
		List<Account> list = new ArrayList<Account>();
		String sql = "INSERT INTO Accounts VALUES(default, ?, ?, ?)"; // parameterized query
		try (PreparedStatement stmt = con.prepareStatement(sql)) {
//			System.out.print("Enter Name: ");
//			String name = sc.next();
//			System.out.print("Enter Party: ");
//			String party = sc.next();
//			System.out.print("Enter Votes: ");
//			int votes = sc.nextInt();

			stmt.setString(1, c.getName());
			stmt.setString(2, c.getParty());
			stmt.setInt(3, c.getVotes());

			int count = stmt.executeUpdate();
			System.out.println("Rows Affected: " + count);
		}
		return 0;

	}

	public int update(Account c) throws Exception {
		String sql = "UPDATE Accounts SET name=?, party=?, votes=? WHERE id=?";
		try (PreparedStatement stmt = con.prepareStatement(sql)) {
			stmt.setString(1, c.getName());
			stmt.setString(2, c.getParty());
			stmt.setInt(3, c.getVotes());
			stmt.setInt(4, c.getId());
			int count = stmt.executeUpdate();
			return count;
		} // stmt.close();
	}

	public int deleteById(int id) throws Exception {

		String sql = "DELETE FROM Accounts WHERE id=?";
		// TODO: Lab assignment

		try (PreparedStatement stmt = con.prepareStatement(sql)) {
			stmt.setInt(1, id);
			int count = stmt.executeUpdate();
			
			System.out.println("Rows Affected: " + count);
			return count;
		} // rs.close();
		
	}

	

	public Account findById(int id) {
	    // TODO: Lab assignment
	    String sql = "SELECT * FROM Accounts WHERE id=?";
	    try (PreparedStatement stmt = con.prepareStatement(sql)) {
	        stmt.setInt(1, id);
	        ResultSet rs = stmt.executeQuery();
	        
	        if (rs.next()) {
	            // Retrieve Account data from the ResultSet and create a Account object
	            int AccountId = rs.getInt("id");
	            String name = rs.getString("name");
	            String party = rs.getString("party");
	            int votes = rs.getInt("votes");
	            
	            
	            
	            
	            Account Account = new Account(AccountId,  name,  party,  votes);
	            // Initialize other Account fields here
	            System.out.println("Account is "+ Account);
	            
	            return Account;
	        }
	    } catch (SQLException e) {
	        // Handle any SQL-related exceptions here
	        e.printStackTrace();
	    }
	    
	    return null; // Return null if the Account with the specified ID is not found
	}


	public Account findAll() {
		List<Account> list = new ArrayList<Account>();
		  String sql = "SELECT * FROM Accounts ";
		    try (PreparedStatement stmt = con.prepareStatement(sql)) {
		      
		        ResultSet rs = stmt.executeQuery();
		        
		        while (rs.next()) {
		            // Retrieve Account data from the ResultSet and create a Account object
		         
		        	int id = rs.getInt("id");
		            String name = rs.getString("name");
		            String party = rs.getString("party");
		            int votes = rs.getInt("votes");
		            
		            
		            
		            
		            Account Account = new Account(id,  name,  party,  votes);
		            
		            System.out.println("Account is "+ Account);
		            
		          //  return Account;
		        }
		    } catch (SQLException e) {
		        // Handle any SQL-related exceptions here
		        e.printStackTrace();
		    }
			return null;
			
		
		// TODO: Lab assignment
	//	return list;
	}

	public List<Account> findByParty(String party) throws Exception {
		List<Account> list = new ArrayList<Account>();
		String sql = "SELECT * FROM Accounts WHERE party=?";
		try (PreparedStatement stmt = con.prepareStatement(sql)) {
			stmt.setString(1, party);
			try (ResultSet rs = stmt.executeQuery()) {
				while (rs.next()) {
					int id2 = rs.getInt("id");
					String name = rs.getString("name");
					party = rs.getString("party");
					int votes = rs.getInt("votes");
					Account c = new Account(id2, name, party, votes);
					list.add(c);
				}
			} // rs.close();
		} // stmt.close();
		return list;
	}
}
