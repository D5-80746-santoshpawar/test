
import java.util.List;
import java.util.Scanner;

public class Main {
	public static Candidate acceptCandidate(Scanner sc) {
		System.out.print("Enter Id: ");
		int id = sc.nextInt();
		System.out.print("Enter Name: ");
		String name = sc.next();
		System.out.print("Enter Party: ");
		String party = sc.next();
		System.out.print("Enter Votes: ");
		int votes = sc.nextInt();
		Candidate c = new Candidate(id, name, party, votes);
		return c;
	}

	public static void main(String[] args) {
		// TODO: Menu driven program

		Scanner sc = new Scanner(System.in);

		int choice;

		while (true) {
			System.out.println("0. EXIT");
			System.out.println("1. add new Account Holder ");
			System.out.println("2. display all Account Holder Details ");
			System.out.println("3. edit name and birthdate");
			System.out.println("4. display Account Holder Details for given account type");
			System.out.println("5.  delete Account Holder Details for given account number. ");
			System.out.println("5. display account type wise total number of Account Holders");
			System.out.println("6. Sort by Account balance.");

			System.out.println("===================================================");
			System.out.print("Enter your choice : ");
			choice = sc.nextInt();

			switch (choice) {

			case 1:
				try (CandidateDao dao = new CandidateDao()) {
					Candidate c = acceptCandidate(sc);
					int count = dao.update(c);
					System.out.println("Rows Updated: " + count);
				} // dao.close();
				catch (Exception e) {
					e.printStackTrace();
				}
				break;

			case 2:
				try (CandidateDao dao = new CandidateDao()) {
					System.out.print("Enter party: ");
					String party = sc.next();
					List<Candidate> list = dao.findByParty(party);
					list.forEach(c -> System.out.println(c));
				} // dao.close();
				catch (Exception e) {
					e.printStackTrace();
				}

			case 3:

				try (CandidateDao dao = new CandidateDao()) {
					Candidate c = acceptCandidate(sc);
					int rowsChanged = dao.save(c);
					int list = dao.save(c);
					System.out.println("Candidate list: " + c);
					// int list.forEach(c -> System.out.println(c));
				} // dao.close();
				catch (Exception e) {
					e.printStackTrace();
				}

				break;

			case 4:
				try (CandidateDao dao = new CandidateDao()) {
					System.out.print("Enter id: ");
					int id = sc.nextInt();
					int list = dao.deleteById(id);
					// list.forEach(c -> System.out.println(c));
				} // dao.close();
				catch (Exception e) {
					e.printStackTrace();
				}
				break;

			case 5:
				try (CandidateDao dao = new CandidateDao()) {
					System.out.print("Enter id: ");
					int id = sc.nextInt();
					Candidate list = dao.findById(id);
					// list.forEach(c -> System.out.println(c));
				} // dao.close();
				catch (Exception e) {
					e.printStackTrace();
				}

				break;

			case 6:
				try (CandidateDao dao = new CandidateDao()) {

					Candidate list = dao.findAll();
					// list.forEach(c -> System.out.println(c));
				} // dao.close();
				catch (Exception e) {
					e.printStackTrace();
					break;
				}
			}
		}

	}
}